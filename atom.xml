<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忽如远行客</title>
  <icon>https://www.gravatar.com/avatar/cccd8c60c09f9d87466d6201f5ee7f33</icon>
  <subtitle>人生天地间，忽如远行客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-16T02:25:00.455Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>二次元阿宅</name>
    <email>此处省略</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python抓取数据汇总</title>
    <link href="http://yoursite.com/2019/06/16/python%E6%8A%93%E5%8F%96%E6%95%B0%E6%8D%AE%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2019/06/16/python抓取数据汇总/</id>
    <published>2019-06-16T02:23:24.000Z</published>
    <updated>2019-06-16T02:25:00.455Z</updated>
    
    <content type="html"><![CDATA[<p>星海暗流<br>博客园<br>首页<br>新随笔<br>联系<br>订阅<br>管理<br>随笔 - 18  文章 - 0  评论 - 0<br>python爬虫数据抓取方法汇总<br>概要：利用python进行web数据抓取方法和实现。</p><p>1、python进行网页数据抓取有两种方式：一种是直接依据url链接来拼接使用get方法得到内容，一种是构建post请求改变对应参数来获得web返回的内容。</p><pre><code>一、第一种方法通常用来获取静态页面内容，比如豆瓣电影内容分类下动画对应的链接：</code></pre><p>1<br><a href="http://www.douban.com/tag/%E5%8A%A8%E7%94%BB/?focus=movie" target="_blank" rel="noopener">http://www.douban.com/tag/%E5%8A%A8%E7%94%BB/?focus=movie</a><br>                   纪录片对应的链接：</p><p><a href="http://www.douban.com/tag/%E7%BA%AA%E5%BD%95%E7%89%87/?focus=movie" target="_blank" rel="noopener">http://www.douban.com/tag/%E7%BA%AA%E5%BD%95%E7%89%87/?focus=movie</a><br>　　　　　　tag 与 /?foucus中间的代表关键字，每次将页面对应的关键字进行替换就能抓取到相应的页面。</p><p>　　　　</p><p>　　　　   二、第二种方法是通过使用post请求来进行获取web内容抓取，由于许多网站是动态网站，每次请求返回的对应链接都是无变化，所以不能直接使用get方法来抓取网站内容，基本思路是只能依据每次发送的post数据请求观察其中的参数，并模拟构造post请求实现相应的页面获取。</p><p>2、python简易代码实现web抓取：</p><p>复制代码<br> 1 #coding=utf-8<br> 2<br> 3 import urllib,urllib2<br> 4<br> 5 #继续以抓取豆瓣电影分类链接为例<br> 6<br> 7 movie_list = [‘%E7%BA%AA%E5%BD%95%E7%89%87’,’%E6%96%87%E8%89%BA’,’%E5%8F%B2%E8%AF%97’]<br> 8<br> 9 for i in movie_list:<br>10         url = <a href="http://www.douban.com/tag/%E5%8F%B2%E8%AF%97/?focus=movie" target="_blank" rel="noopener">http://www.douban.com/tag/%E5%8F%B2%E8%AF%97/?focus=movie</a><br>11         url = url.replace(‘%E5%8F%B2%E8%AF%97’,i)<br>12         request = urllib2.Request(url)<br>13         html = urllib2.open(request)<br>复制代码</p><p>3、使用phantomJS 模拟浏览器进行数据抓取</p><p><a href="http://www.cnblogs.com/chenqingyang/p/3772673.html" target="_blank" rel="noopener">http://www.cnblogs.com/chenqingyang/p/3772673.html</a></p><p>这是我学习爬虫比较深入的一步了，大部分的网页抓取用urllib2都可以搞定，但是涉及到JavaScript的时候，urlopen就完全傻逼了，所以不得不用模拟浏览器，方法也有很多，此处我采用的是selenium2+phantomjs，原因在于：</p><p>selenium2支持所有主流的浏览器和phantomjs这些无界面的浏览器，我开始打算用Chrome，但是发现需要安装一个什么Chrome驱动，于是就弃用了，选择phantomjs，而且这个名字听起来也比较洋气。</p><p>上网查了很多资料，发现网上selenium2+phantomjs的使用方法的中文资源十分欠缺，不得不阅读晦涩的官方文档，所以这里记下目前已经实现的操作，再加上一些我个人遇到的问题以及对应的解决方案。</p><p>背景知识：</p><p>phantomjs是一个基于webkit的没有界面的浏览器，所以运行起来比完整的浏览器要高效。</p><p>selenium的英文原意是Se，化学元素，这里是一个测试web应用的工具，目前是2.42.1版本，和1版的区别在于2.0+中把WebDrive整合在了一起。</p><p>selenium2支持的Python版本：2.7, 3.2, 3.3 and 3.4</p><p>如果需要进行远程操作的话，就需要额外安装selenium server</p><p>安装：</p><p>先装selenium2，哪种方式装都可以，我一般都是直接下载压缩包，然后用python setup.py install命令来装，selenium 2.42.1的下载地址：<a href="https://pypi.python.org/pypi/selenium/2.42.1" target="_blank" rel="noopener">https://pypi.python.org/pypi/selenium/2.42.1</a></p><p>然后下载phantomjs，<a href="https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-1.9.7-windows.zip，解压后可以看到一个phantomjs.exe的文件" target="_blank" rel="noopener">https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-1.9.7-windows.zip，解压后可以看到一个phantomjs.exe的文件</a></p><p>范例1：</p><p>复制代码<br>复制代码</p><p>#coding=utf-8<br>from selenium import webdriver</p><p>driver = webdriver.PhantomJS(executable_path=’C:\Users\Gentlyguitar\Desktop\phantomjs-1.9.7-windows\phantomjs.exe’)<br>driver.get(“<a href="http://duckduckgo.com/&quot;" target="_blank" rel="noopener">http://duckduckgo.com/&quot;</a>)<br>driver.find_element_by_id(‘search_form_input_homepage’).send_keys(“Nirvana”)<br>driver.find_element_by_id(“search_button_homepage”).click()<br>print driver.current_url<br>driver.quit()<br>复制代码<br>复制代码<br>其中的executable_path就是刚才phantomjs.exe的路径，运行结果：</p><p><a href="https://duckduckgo.com/?q=Nirvana" target="_blank" rel="noopener">https://duckduckgo.com/?q=Nirvana</a><br>Walk through of the example：</p><p> 值得一提的是：</p><p>get方法会一直等到页面被完全加载，然后才会继续程序</p><p>但是对于ajax： It’s worth noting that if your page uses a lot of AJAX on load then WebDriver may not know when it has completely loaded</p><p>send_keys就是填充input</p><p>范例2：</p><p>复制代码<br>复制代码</p><p>#coding=utf-8<br>from selenium import webdriver<br>from selenium.webdriver.common.keys import Keys<br>from selenium.webdriver.support.ui import WebDriverWait<br>from selenium.webdriver import ActionChains<br>import time<br>import sys</p><p>driver = webdriver.PhantomJS(executable_path=’C:\Users\Gentlyguitar\Desktop\phantomjs-1.9.7-windows\phantomjs.exe’)<br>driver.get(“<a href="http://www.zhihu.com/#signin&quot;" target="_blank" rel="noopener">http://www.zhihu.com/#signin&quot;</a>)</p><p>#driver.find_element_by_name(‘email’).send_keys(‘your email’)<br>driver.find_element_by_xpath(‘//input[@name=”password”]’).send_keys(‘your password’)</p><p>#driver.find_element_by_xpath(‘//input[@name=”password”]’).send_keys(Keys.RETURN)<br>time.sleep(2)<br>driver.get_screenshot_as_file(‘show.png’)</p><p>#driver.find_element_by_xpath(‘//button[@class=”sign-button”]’).click()<br>driver.find_element_by_xpath(‘//form[@class=”zu-side-login-box”]’).submit()</p><p>try:<br>    dr=WebDriverWait(driver,5)<br>    dr.until(lambda the_driver:the_driver.find_element_by_xpath(‘//a[@class=”zu-top-nav-userinfo “]’).is_displayed())<br>except:<br>    print ‘登录失败’<br>    sys.exit(0)<br>driver.get_screenshot_as_file(‘show.png’)</p><p>#user=driver.find_element_by_class_name(‘zu-top-nav-userinfo ‘)</p><p>#webdriver.ActionChains(driver).move_to_element(user).perform() #移动鼠标到我的用户名<br>loadmore=driver.find_element_by_xpath(‘//a[@id=”zh-load-more”]’)<br>actions = ActionChains(driver)<br>actions.move_to_element(loadmore)<br>actions.click(loadmore)<br>actions.perform()<br>time.sleep(2)<br>driver.get_screenshot_as_file(‘show.png’)<br>print driver.current_url<br>print driver.page_source<br>driver.quit()<br>复制代码<br>复制代码</p><p>这个程序完成的是，登陆知乎，然后能自动点击页面下方的“更多”，以载入更多的内容</p><p>Walk through of the example：</p><p>from selenium.webdriver.common.keys import Keys，keys这个类就是键盘上的键，文中的send_keys(Keys.RETURN)就是按一个回车</p><p>from selenium.webdriver.support.ui import WebDriverWait是为了后面一个等待的操作</p><p>from selenium.webdriver import ActionChains是导入一个动作的类，这句话的写法，我找了很久</p><p>find_element推荐使用Xpath的方法，原因在于：优雅、通用、易学</p><p>Xpath表达式写法教程：<a href="http://www.ruanyifeng.com/blog/2009/07/xpath_path_expressions.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2009/07/xpath_path_expressions.html</a></p><p>值得注意的是，避免选择value带有空格的属性，譬如class = “country name”这种，不然会报错，大概compound class之类的错</p><p>检查用户密码是否输入正确的方法就是在填入后截屏看看</p><p>想要截屏，这么一句话就行：</p><p>driver.get_screenshot_as_file(‘show.png’)</p><p>但是，这里的截屏是不带滚动条的，就是给你把整个页面全部照下来</p><p>try:<br>    dr=WebDriverWait(driver,5)<br>    dr.until(lambda the_driver:the_driver.find_element_by_xpath(‘//a[@class=”zu-top-nav-userinfo “]’).is_displayed())<br>except:<br>    print ‘登录失败’<br>    sys.exit(0)</p><p>是用来通过检查某个元素是否被加载来检查是否登录成功，我认为当个黑盒子用就可以了。其中5的解释：5秒内每隔500毫秒扫描1次页面变化，直到指定的元素</p><p>对于表单的提交，即可以选择登录按钮然后使用click方法，也可以选择表单然后使用submit方法，后者能应付没有登录按钮的情况，所以推荐使用submit()</p><p>对于一次点击，既可以使用click()，也可以使用一连串的action来实现，如文中：</p><p>loadmore=driver.find_element_by_xpath(‘//a[@id=”zh-load-more”]’)<br>actions = ActionChains(driver)<br>actions.move_to_element(loadmore)<br>actions.click(loadmore)<br>actions.perform()</p><p>这5句话其实就相当于一句话，find element然后click，但是action的适用范围更广，譬如在这个例子中，要点击的是一个a标签对象，我不知道为什么直接用click不行，不起作用</p><p>print driver.current_url<br>print driver.page_source<br>即打印网页的两个属性：url和source</p><p>总结：除了能解决动态页面的问题以外，用selenium用来模拟登陆也比urllib2简单得多。</p><p>参考文献：</p><p><a href="http://www.realpython.com/blog/python/headless-selenium-testing-with-python-and-phantomjs/#.U5FXUvmSziE" target="_blank" rel="noopener">http://www.realpython.com/blog/python/headless-selenium-testing-with-python-and-phantomjs/#.U5FXUvmSziE</a></p><p><a href="http://selenium-python.readthedocs.org/getting-started.html" target="_blank" rel="noopener">http://selenium-python.readthedocs.org/getting-started.html</a></p><p>Xpath写法</p><p><a href="http://www.cnblogs.com/paisen/p/3310067.html" target="_blank" rel="noopener">http://www.cnblogs.com/paisen/p/3310067.html</a></p><p>4、使用代理防止抓取ip被封</p><p>实时动态抓取代理可用Ip,生成可用代理地址池</p><p>5、scrapy爬虫代理——利用crawlera神器，无需再寻找代理IP</p><p>由于工作需要，利用scrpay采集某个商业网站的数据。但是这个网站反扒非常厉害。因此不得不采用代理IP来做，但是做了几天后几乎能用的代理IP全被禁掉了。而且这种找代理、然后再验证的流程非常麻烦，于是博主想到了第三方平台crawlera.</p><p>一、crawlera平台注册</p><pre><code>首先申明，注册是免费的，使用的话除了一些特殊定制外都是free的。1、登录其网站 https://dash.scrapinghub.com/account/signup/填写用户名、密码、邮箱，注册一个crawlera账号并激活2、创建Organizations,然后添加crawlear服务</code></pre><p>然后点击 +Service ,在弹出的界面点击Crawlear，输入名字，选择信息就创建成功了。</p><p>创建成功过后点击你的Crawlear名字便可以看到API的详细信息。</p><p>二、部署到srcapy项目</p><pre><code>1、安装scarpy-crawlerapip install 、easy_install 随便你采用什么安装方式都可以</code></pre><p>1<br>pip install scrapy-crawlera<br>    2、修改settings.py</p><pre><code>如果你之前设置过代理ip，那么请注释掉，加入crawlera的代理</code></pre><p>1<br>2<br>3<br>4<br>5<br>DOWNLOADER_MIDDLEWARES = {</p><pre><code># &apos;scrapy.contrib.downloadermiddleware.httpproxy.HttpProxyMiddleware&apos;: 110,# &apos;partent.middlewares.ProxyMiddleware&apos;: 100,</code></pre><p>‘scrapy_crawlera.CrawleraMiddleware’: 600<br>}<br>    为了是crawlera生效，需要添加你创建的api信息（如果填写了API key的话，pass填空字符串便可）</p><p>1<br>2<br>3<br>CRAWLERA_ENABLED = True<br>CRAWLERA_USER = ‘<api key>‘<br>CRAWLERA_PASS = ‘’<br>    为了达到更高的抓取效率，可以禁用Autothrottle扩展和增加并发请求的最大数量，以及设置下载超时，代码如下</api></p><p>1<br>2<br>3<br>4<br>CONCURRENT_REQUESTS = 32<br>CONCURRENT_REQUESTS_PER_DOMAIN = 32<br>AUTOTHROTTLE_ENABLED = False<br>DOWNLOAD_TIMEOUT = 600<br>    如果在代码中设置有 DOWNLOAD_DELAY的话，需要在setting.py中添加</p><p>1<br>CRAWLERA_PRESERVE_DELAY = True<br>    如果你的spider中保留了cookies,那么需要在Headr中添加</p><p>1<br>2<br>3<br>4<br>5<br>DEFAULT_REQUEST_HEADERS = {</p><h1 id="‘Accept’-‘text-html-application-xhtml-xml-application-xml-q-0-9-image-webp-q-0-8’"><a href="#‘Accept’-‘text-html-application-xhtml-xml-application-xml-q-0-9-image-webp-q-0-8’" class="headerlink" title="‘Accept’: ‘text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8’,"></a>‘Accept’: ‘text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8’,</h1><h1 id="‘Accept-Language’-‘zh-CN-zh-q-0-8’"><a href="#‘Accept-Language’-‘zh-CN-zh-q-0-8’" class="headerlink" title="‘Accept-Language’: ‘zh-CN,zh;q=0.8’,"></a>‘Accept-Language’: ‘zh-CN,zh;q=0.8’,</h1><p>  ‘X-Crawlera-Cookies’: ‘disable’<br>}<br>三、运行爬虫</p><pre><code>这些都设置好了过后便可以运行你的爬虫了。这时所有的request都是通过crawlera发出的，信息如下</code></pre><p>更多的crawlera信息请参考官方文档：<a href="http://doc.scrapinghub.com/index.html" target="_blank" rel="noopener">http://doc.scrapinghub.com/index.html</a></p><p>分类: python<br>标签: python<br>好文要顶 关注我 收藏该文<br>tornytooo<br>关注 - 2<br>粉丝 - 4<br>+加关注<br>1 0<br>« 上一篇：解决：sudo: parse error in /etc/sudoers near line 24 …报错<br>» 下一篇：使用 <a href="http://httpbin.org/" target="_blank" rel="noopener">http://httpbin.org/</a> 验证代理地址<br>posted @ 2015-12-05 16:30 tornytooo 阅读(3379) 评论(0) 编辑 收藏<br>刷新评论刷新页面返回顶部<br>注册用户登录后才能发表评论，请 登录 或 注册，访问网站首页。<br>【推荐】超50万C++/C#源码: 大型实时仿真组态图形源码<br>【前端】SpreadJS表格控件，可嵌入系统开发的在线Excel<br>【培训】阿里P8面试官：什么样的人能进阿里<br>【推荐】程序员问答平台，解决您开发中遇到的技术难题</p><p>相关博文：<br>· 动态爬虫——selenium2搭载phantomjs入门范例<br>· Python-爬虫-动态渲染页面抓取-（Selenium）的使用<br>· 2017.07.28 Python网络爬虫之爬虫实战 今日影视2 获取JS加载的数据<br>· 爬虫原理与数据抓取 一<br>· Python爬虫实战：使用Selenium抓取QQ空间好友说说</p><p>最新新闻：<br>· 5年间AMD股价上升800%！苏姿丰入选全球最佳CEO：黄仁勋落榜<br>· 傲慢与偏见：消毒是如何引入外科手术的<br>· 新买奔驰突然漏油 西安利之星被曝要求车主签署保密协议<br>· 在东京生活的中国IT程序员<br>· 美国“封杀”华为后：博通营收将少 20 亿美元<br>» 更多新闻…<br>昵称：tornytooo<br>园龄：4年2个月<br>粉丝：4<br>关注：2<br>+加关注<br>&lt;    2019年6月    &gt;<br>日    一    二    三    四    五    六<br>26    27    28    29    30    31    1<br>2    3    4    5    6    7    8<br>9    10    11    12    13    14    15<br>16    17    18    19    20    21    22<br>23    24    25    26    27    28    29<br>30    1    2    3    4    5    6<br>搜索</p><p>常用链接<br>我的随笔<br>我的评论<br>我的参与<br>最新评论<br>我的标签<br>我的标签<br>python(9)<br>编程(6)<br>Linux(4)<br>工具(3)<br>git(2)<br>mongodb 数据库(1)<br>故障维修(1)<br>算法(1)<br>随笔分类<br>git(2)<br>Linux(4)<br>mongodb(1)<br>python(10)<br>sql(1)<br>算法(1)<br>随笔档案<br>2016年10月 (2)<br>2016年7月 (1)<br>2016年5月 (2)<br>2016年4月 (5)<br>2016年3月 (2)<br>2016年2月 (1)<br>2015年12月 (1)<br>2015年11月 (1)<br>2015年10月 (1)<br>2015年9月 (2)<br>阅读排行榜</p><ol><li>python特性、属性以及私有化(5061)</li><li>解决：sudo: parse error in /etc/sudoers near line 24 …报错(3929)</li><li>python 装饰器、内部函数、闭包简单理解(3593)</li><li>python爬虫数据抓取方法汇总(3379)</li><li>python日志记录-logging模块(2028)<br>推荐排行榜</li><li>python 装饰器、内部函数、闭包简单理解(4)</li><li>python爬虫数据抓取方法汇总(1)</li><li>python特性、属性以及私有化(1)<br>Copyright ©2019 tornytooo</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;星海暗流&lt;br&gt;博客园&lt;br&gt;首页&lt;br&gt;新随笔&lt;br&gt;联系&lt;br&gt;订阅&lt;br&gt;管理&lt;br&gt;随笔 - 18  文章 - 0  评论 - 0&lt;br&gt;python爬虫数据抓取方法汇总&lt;br&gt;概要：利用python进行web数据抓取方法和实现。&lt;/p&gt;
&lt;p&gt;1、python进行
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>一个不算计划的计划？</title>
    <link href="http://yoursite.com/2019/06/16/%E4%B8%80%E4%B8%AA%E4%B8%8D%E7%AE%97%E8%AE%A1%E5%88%92%E7%9A%84%E8%AE%A1%E5%88%92%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/06/16/一个不算计划的计划？/</id>
    <published>2019-06-16T01:57:35.000Z</published>
    <updated>2019-06-16T02:17:29.976Z</updated>
    
    <content type="html"><![CDATA[<p>这其实应该算是一个不算计划的计划？简单的来说，就是我对现状的一个简单概述吧，或者说是对未来的一个简单的计划。</p><p>this is not easy，在过去的一年中，我的个人计划在某些方面来说可以说是一团乱码，不管是计划好的，或者说是没有计划好的，总之一切都可以说是一团乱麻，给我个人带来了很多的问题。</p><p>目前我需要进行的可以说是最重要的一件事就是有关我的未来考研的选择，我目前正在试图联系一位我非常喜欢的老师，如果这位老师答应的话，我会在下个半年开始准备考研。</p><p>这个选择相对于我来说的，其实可以算是一个比较简单的选择，首先是因为我的专业课不需要进行更改，在半年的时间里可以更加专注于公共课的学习，尤其是数学方面的学习。说实话，数学一直以来都是我的一个苦手科目，从小就是。所以我觉得我需要在下半个学期加强我对于数学的投入时间以及重视程度。</p><p>下一个问题则是有关我目前马上要进行的研究生毕设答辩，我对这个非常担心，因为我们组大神云集，但是每个小组是会有一定的进二辩的名额的，所以我还是很慌张的，我准备用今天下午的时间来准备一下老师们可能会问的问题。</p><p>然后是准备搬家以及租房子的事情，这两件事情我准备在答辩结束之后进行，给自己一点自信，自己一定不会进二辩的，虽然不是很清楚自己的这种蜜汁自信是哪里来的，但是还是要自信一点，最近很多事都是处于一种悬而未决的状态，真是的比较麻烦的一种感觉吧，毕竟我个人还是比较喜欢那种确定下来的感觉。但是没有办法嘛，选择才是人生的常态啊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这其实应该算是一个不算计划的计划？简单的来说，就是我对现状的一个简单概述吧，或者说是对未来的一个简单的计划。&lt;/p&gt;
&lt;p&gt;this is not easy，在过去的一年中，我的个人计划在某些方面来说可以说是一团乱码，不管是计划好的，或者说是没有计划好的，总之一切都可以说是
      
    
    </summary>
    
      <category term="计划" scheme="http://yoursite.com/categories/%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="计划" scheme="http://yoursite.com/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>程序优化相关</title>
    <link href="http://yoursite.com/2019/04/13/%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2019/04/13/程序优化相关/</id>
    <published>2019-04-13T05:57:04.000Z</published>
    <updated>2019-05-06T05:10:57.294Z</updated>
    
    <content type="html"><![CDATA[<p>假设10*10的空间均匀分布着100个节点，我们的任务就是让无线传感器的生命周期最长，也就是使用的时间最长，能量损耗最低，假设种群的数目为100个，也就是说如果让种群处于最优的状态，那么基站就可以重复这100个循环的设置，让其使用的时间最长。</p><p>此处需要假设传感器的功率是可以由基站控制的，就是可以控制传感器是处于簇头模式还是普通的模式，或者是传感器模式。</p><p>假设簇头最多可以携带十个子节点</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假设10*10的空间均匀分布着100个节点，我们的任务就是让无线传感器的生命周期最长，也就是使用的时间最长，能量损耗最低，假设种群的数目为100个，也就是说如果让种群处于最优的状态，那么基站就可以重复这100个循环的设置，让其使用的时间最长。&lt;/p&gt;
&lt;p&gt;此处需要假设传感
      
    
    </summary>
    
      <category term="学士论文相关" scheme="http://yoursite.com/categories/%E5%AD%A6%E5%A3%AB%E8%AE%BA%E6%96%87%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="MATLAB" scheme="http://yoursite.com/tags/MATLAB/"/>
    
  </entry>
  
  <entry>
    <title>算法工具箱及其使用</title>
    <link href="http://yoursite.com/2019/04/08/%E7%AE%97%E6%B3%95%E5%B7%A5%E5%85%B7%E7%AE%B1%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/04/08/算法工具箱及其使用/</id>
    <published>2019-04-08T01:37:00.000Z</published>
    <updated>2019-04-08T07:50:55.271Z</updated>
    
    <content type="html"><![CDATA[<p>一、ga函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x,fval,exitflag,output,population,scores]=ga(fitnessfcn,nvars,……options)</span><br></pre></td></tr></table></figure><p>fitnessfcn为适应度句柄函数，nvars为目标函数的自变量函数，options为函数的属性设置；</p><p>x为最佳染色体的返回值，fval为染色体的最佳适应度，exitflag为算法停止的原因，output为算法的输出结构，population为种群适应度的列向量，scores为最终的到的种群；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">程序：</span><br><span class="line">clear</span><br><span class="line">clc</span><br><span class="line">A=[1,1;-1,2;2,1]</span><br><span class="line">B=[2,2,3]</span><br><span class="line">lb=zeros(2,1);</span><br><span class="line">[x,fval,extflag]=ga(@lincontest6,2,A,B,[],[],lb)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">x =</span><br><span class="line">    0.6670    1.3340</span><br><span class="line"></span><br><span class="line">fval =</span><br><span class="line">   -8.2258</span><br><span class="line"></span><br><span class="line">extflag =</span><br><span class="line">     1</span><br></pre></td></tr></table></figure><p>二、gaoptimest函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">options=gaoptimest(&apos;paraml&apos;,value1,value2,……)</span><br></pre></td></tr></table></figure><p>遗传算法本质上是一种启发式的随机运算，可以将前一次运行得到的最后种群作为下一次运行的初识种群。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[x,fval,reasn,output,final_pop]=ga(@fitnessfcn,nvars)</span><br><span class="line">最后一个输出变量final_pop返回的就是上一次运行得到的最后的种群，再将final_pop作为ga函数的初识种群，语法格式如下</span><br><span class="line">options=gaoptimest(&apos;InitialPopulation&apos;,final_pop);</span><br><span class="line">[x,fval,reason,output,final_pop2]=ga(@fitnessfcn,nvars,options);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、ga函数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;
      
    
    </summary>
    
      <category term="MATLAB" scheme="http://yoursite.com/categories/MATLAB/"/>
    
    
      <category term="MATLAB" scheme="http://yoursite.com/tags/MATLAB/"/>
    
  </entry>
  
  <entry>
    <title>遗传算法程序设计</title>
    <link href="http://yoursite.com/2019/04/07/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2019/04/07/遗传算法程序设计/</id>
    <published>2019-04-07T06:05:52.000Z</published>
    <updated>2019-04-08T01:08:32.475Z</updated>
    
    <content type="html"><![CDATA[<p>一、程序设计</p><p>假设求函数<a href="https://www.codecogs.com/eqnedit.php?latex=f(x)=9*sin(5x)&plus;8*cos(4x)" target="_blank"><img src="https://latex.codecogs.com/png.latex?f(x)=9*sin(5x)&plus;8*cos(4x)" title="f(x)=9*sin(5x)+8*cos(4x)"></a>, <a href="https://www.codecogs.com/eqnedit.php?latex=x\epsilon&space;[0,15]" target="_blank"><img src="https://latex.codecogs.com/png.latex?x\epsilon&space;[0,15]" title="x\epsilon [0,15]"></a></p><hr><p>1.初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%种群初始化</span><br><span class="line">function pop=initpop(popsize,chromlength)</span><br><span class="line">pop=round(rand(popsizechromlength));</span><br><span class="line">%rand随机产生每个单元为【0，1】行数为popsize，列数为chromlength的矩阵</span><br><span class="line">%round对每个矩阵进行圆整</span><br></pre></td></tr></table></figure><p>initpop函数的功能是实现群体的初始化，popsize表示群体的大小，chromlength表示染色体的长度。</p><hr><p>2.目标函数值</p><p>二进制数转化为十进制数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%二进制数转换为十进制数</span><br><span class="line">function pop2=decodebinary(pop)</span><br><span class="line">[px,py]=size(pop); %求pop的行数和列数</span><br><span class="line">for i=1:py</span><br><span class="line">    pop1(:,i)=2.^(py-i).*pop(:,i)</span><br><span class="line">end</span><br><span class="line">pop2=sum(pop,2); %求pop的每行之和</span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><p>二进制编码转化为十进制数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%将二进制编码转化为十进制数</span><br><span class="line">function pop2=decodechrom(pop,spoint,length)</span><br><span class="line">pop1=pop(:,spoint:spoint+length-1);</span><br><span class="line">pop2=decodebinary(pop1);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><p>计算目标函数值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%计算目标函数</span><br><span class="line">function [objvalue]=calobjvalue(pop)</span><br><span class="line">temp1=decodechrom(pop,1,10); %将pop的每一行转化为十进制数</span><br><span class="line">x=temp1*10/1023; %将二值域中的数转化为变量域中的数</span><br><span class="line">objvalue=10*sin(5*x)+7*cos(4*x);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><p>3.计算个体的期望值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">%计算个体的期望值</span><br><span class="line">function fitvalue=calfitvalue(objvalue)</span><br><span class="line">global Cmin;</span><br><span class="line">Cmin=0;</span><br><span class="line">[px,py]=size(objvalue);</span><br><span class="line">for i=i:px</span><br><span class="line">    if objvalue(i)+Cmin&gt;0</span><br><span class="line">        temp=Cmin+objvalue(i);</span><br><span class="line">    else</span><br><span class="line">        temp=0.0;</span><br><span class="line">    end</span><br><span class="line">    fitvalue(i)=temp;</span><br><span class="line">end</span><br><span class="line">fitvalue=fitvalue&apos;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><p>4.选择复制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">%选择复制</span><br><span class="line">function [newpop]=selection(pop,fitvalue)</span><br><span class="line">totalfit=sum(fitvalue); %求适应度之和</span><br><span class="line">fitvalue=fitvalue/totalfit; %求每个个体被选中的机会</span><br><span class="line">fitvalue=cumsum(fitvalue);</span><br><span class="line">[px,py]=size(pop);</span><br><span class="line">ms=short(rand(px,1)); %从小到大排列</span><br><span class="line">fitin=1;</span><br><span class="line">newin=1;</span><br><span class="line">while newin&lt;=px</span><br><span class="line">    if(ms(newin))&lt;fitvalue(fitin)</span><br><span class="line">        newpop(newin)=pop(fitin);</span><br><span class="line">        newin=newin+1;</span><br><span class="line">    else</span><br><span class="line">        fitin=fitin+1;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><p>5.交叉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">%交叉</span><br><span class="line">function [newpop]=crossover(pop,pc)</span><br><span class="line">[px,py]=size(pop);</span><br><span class="line">newpop=ones(size(pop));</span><br><span class="line">for i=1:2:px-1</span><br><span class="line">    if(rand&lt;pc)</span><br><span class="line">        cpoint=round(rand*py);</span><br><span class="line">        newpop(i,:)=[pop(i,1:cpoint),pop(i+1,cpoint+1:py)];</span><br><span class="line">        newpop(i+1,:)=[pop(i+1,1:cpoint),pop(i,cpoint+1:py)];</span><br><span class="line">    else</span><br><span class="line">        newpop(i,:)=pop(i);</span><br><span class="line">        newpop(i+1,:)=pop(i+1);</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><p>6.变异</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">%变异</span><br><span class="line">function [newpop]=mutation(pop,pm)</span><br><span class="line">[px,py]=size(pop);</span><br><span class="line">newpop=ones(size(pop));</span><br><span class="line">for i=1:px</span><br><span class="line">    if(rand&lt;pm)</span><br><span class="line">        mpoint=round(rand*py);</span><br><span class="line">        if mpoint&lt;=0</span><br><span class="line">            mpoint=1;</span><br><span class="line">        end</span><br><span class="line">        newpop(i)=pop(i);</span><br><span class="line">        if any(newpop(i,mpoint))==0</span><br><span class="line">            newpop(i,mpoint)=1;</span><br><span class="line">        else</span><br><span class="line">            newpop(i.mpoint)=0;</span><br><span class="line">        end</span><br><span class="line">    else</span><br><span class="line">        newpop(i)=pop(i);</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><p>7.求出群体中最大的适应值以及个体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">%求出群体中最大适应值以及个体</span><br><span class="line">function [bestindividual,bestfit]=best(pop,fitvalue)</span><br><span class="line">[px,py]=size(pop);</span><br><span class="line">bestindividual=pop(1,:);</span><br><span class="line">bestfit=fitvalue(i);</span><br><span class="line">for i=2:px</span><br><span class="line">    if fitvalue(i)&gt;bestfit</span><br><span class="line">        bestindividual=pop(i,:);</span><br><span class="line">        bestfit=fitvalue(i);</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><p>8.主程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">popsize=20;</span><br><span class="line">chromlength=10;</span><br><span class="line">pc=0.7;</span><br><span class="line">pm=0.005;</span><br><span class="line">pop=initpop(popsize,chromlength);</span><br><span class="line">for i=1:20 %迭代次数</span><br><span class="line">    [objvalue]=calobjvalue(pop);</span><br><span class="line">    fitvalue=calfitvalue(objvalue);</span><br><span class="line">    [newpop]=selection(pop,fitvalue);</span><br><span class="line">    [newpop]=crossover(pop,pc);</span><br><span class="line">    [newpop]=mutation(pop,pm);</span><br><span class="line">    [bestindividual,bestfit]=best(pop,fitvalue);</span><br><span class="line">    y(i)=max(bestfit);</span><br><span class="line">    n(i)=i</span><br><span class="line">    pop5=bestindividual;</span><br><span class="line">    x(i)=decodechrom(pop5,1,chromlength)*10/1023;</span><br><span class="line">    pop=newpop;</span><br><span class="line">end</span><br><span class="line">fplot(&apos;9*sin(5*x)+8*cos(4*x)&apos;,[0,15])</span><br><span class="line">hold on</span><br><span class="line">plot(x,y,&apos;r*&apos;)</span><br><span class="line">hold off</span><br></pre></td></tr></table></figure><hr><p>二、算法参数设计原则</p><p>1.种群的规模</p><p>当种群的规模过小的时候，就会出现近亲交配，产生病态基因；种群规模较大的时候，难以收敛。种群的规模的建议值应该是0-100.</p><hr><p>2.变异概率</p><p>当变异的概率太小，种群的多样性下降的太快，导致有效基因的迅速消失，而且不容易修补；当变异的概率过大的时候，尽管种群的多样性得到保障，但是高阶模式的被破坏概率也会随之增大。变异的概率一般取值在0.0001-0.2之间。</p><hr><p>3.交配概率</p><p>交配概率太大容易破坏已有的有利模式，随机性增大，容易错失最优个体；交配的概率太低则不能有效的更新种群。</p><hr><p>4.进化代数</p><p>进化代数太小，种群还没有完全成熟，算法没有收敛；进化代数太大，算法可能已经收敛或者早熟，在执行下去没有意义，进化的代数的选择一般是100-500；</p><hr><p>5.种群初始化</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、程序设计&lt;/p&gt;
&lt;p&gt;假设求函数&lt;a href=&quot;https://www.codecogs.com/eqnedit.php?latex=f(x)=9*sin(5x)&amp;plus;8*cos(4x)&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://l
      
    
    </summary>
    
      <category term="学士论文相关" scheme="http://yoursite.com/categories/%E5%AD%A6%E5%A3%AB%E8%AE%BA%E6%96%87%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="MATLAB" scheme="http://yoursite.com/tags/MATLAB/"/>
    
      <category term="遗传算法" scheme="http://yoursite.com/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>matlab运算以及字符串</title>
    <link href="http://yoursite.com/2019/04/07/matlab%E8%BF%90%E7%AE%97%E4%BB%A5%E5%8F%8A%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2019/04/07/matlab运算以及字符串/</id>
    <published>2019-04-07T03:50:39.000Z</published>
    <updated>2019-04-07T05:41:52.932Z</updated>
    
    <content type="html"><![CDATA[<p>一、算术运算</p><p>1.基本算术运算</p><p>矩阵加减运算</p><p>矩阵A和矩阵B必须是同型的矩阵</p><p>一个标量也可以和矩阵进行加减运算，这时把标量和矩阵中的每一个元素进行加减</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">程序：A=[4,3;2,6]</span><br><span class="line">B=A-1</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">A =</span><br><span class="line">     4     3</span><br><span class="line">     2     6</span><br><span class="line"></span><br><span class="line">B =</span><br><span class="line">     3     2</span><br><span class="line">     1     5</span><br></pre></td></tr></table></figure><hr><p>矩阵乘法</p><p>矩阵乘法要求前一个的行和后一个的列相同</p><p>一个标量也可以和矩阵进行乘法运算</p><hr><p>矩阵除法</p><p>矩阵除法有两种，一种是左除，一种是右除</p><p>A\B等效于A的逆左乘B矩阵</p><p>B/A等效于A的逆右乘矩阵B</p><hr><p>矩阵的乘方</p><p>A^x要求A是矩阵，x是标量</p><hr><p>2.点运算</p><p>两个矩阵进行点运算是指他们的对应元素进行相关的运算。</p><hr><p>二、关系运算</p><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">英文</th></tr></thead><tbody><tr><td style="text-align:center">&lt;</td><td style="text-align:center">lt</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">le</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">gt</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">ge</td></tr><tr><td style="text-align:center">=</td><td style="text-align:center">eq</td></tr><tr><td style="text-align:center">~=</td><td style="text-align:center">ne</td></tr></tbody></table><p>两个标量相互比较，结果仍旧是标量</p><p>标量和矩阵进行比较，结果是矩阵</p><p>矩阵和矩阵进行比较，结果是矩阵</p><p>三、逻辑运算</p><p>and、or、not</p><p>矩阵和矩阵=矩阵</p><p>矩阵和标量=矩阵</p><p>标量和标量=标量</p><hr><hr><hr><p>一、字符串的表示</p><p>在matlab中，字符串是用单引号括起来的字符序列，若字符串中的字符含有单引号，则该单引号字符要用两个单引号来表示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将字符串倒排序</span><br><span class="line">revch=ch(end:-1:1)</span><br></pre></td></tr></table></figure><hr><p>二、字符串的操作</p><p>1.字符串的执行</p><p>eval作用是把字符串的内容作为对应的matlab命令来执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">程序：</span><br><span class="line">t=pi;</span><br><span class="line">m=&apos;[t,sin(t),cos(t)]&apos;;</span><br><span class="line">y=eval(m)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">y =</span><br><span class="line">    3.1416    0.0000   -1.0000</span><br></pre></td></tr></table></figure><hr><p>2.字符串和数值之间的转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">程序：</span><br><span class="line">s1=&apos;matlab&apos;</span><br><span class="line">a=abs(s1)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">a =</span><br><span class="line">   109    97   116   108    97    98</span><br></pre></td></tr></table></figure><hr><p>3.字符串的连接</p><p>要将字符串连接起来，有两个方法：字符串向量、strcat函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">字符串向量：中括号将若干个字符串括起来</span><br><span class="line">程序：</span><br><span class="line">[&apos;study&apos;,&apos;hard&apos;]</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">ans =</span><br><span class="line">studyhard</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">strcat函数可以将若干个函数连接起来</span><br><span class="line">程序：</span><br><span class="line">strcat(&apos;study&apos;,&apos;hard&apos;)</span><br><span class="line">结果：</span><br><span class="line">ans =</span><br><span class="line">studyhard</span><br></pre></td></tr></table></figure><hr><p>4.字符串的比较</p><p>关系运算符或者字符串比较函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">利用关系运算符，比较的规则就是按照ASCII码逐个比较</span><br><span class="line">程序：</span><br><span class="line">&apos;wwwwz&apos;&gt;=&apos;qwert&apos;</span><br><span class="line">结果：</span><br><span class="line">ans =</span><br><span class="line">     1     1     1     1     1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">strcmp(s1.s2) %用来比较两个字符串是否相等</span><br><span class="line">strcmp(s1,s2,n) %用来比较前n个字符串是否相等</span><br><span class="line">strcmpi(s1,s2) %忽略字母大小写，用来比较两个字符串是否相等</span><br><span class="line">strcmpi(s1,s2,n) %忽略字母的大小写，用来比较前n个字符是否相等</span><br></pre></td></tr></table></figure><hr><p>5.字符串的查找和替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">findstr(s1,s2) %返回长的字符串在长的字符串中的开始位置</span><br><span class="line">strrep(s1,s2,s3) %将s1中的所有s2子字符串替换s3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、算术运算&lt;/p&gt;
&lt;p&gt;1.基本算术运算&lt;/p&gt;
&lt;p&gt;矩阵加减运算&lt;/p&gt;
&lt;p&gt;矩阵A和矩阵B必须是同型的矩阵&lt;/p&gt;
&lt;p&gt;一个标量也可以和矩阵进行加减运算，这时把标量和矩阵中的每一个元素进行加减&lt;/p&gt;
&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
      <category term="MATLAB" scheme="http://yoursite.com/categories/MATLAB/"/>
    
    
      <category term="MATLAB" scheme="http://yoursite.com/tags/MATLAB/"/>
    
  </entry>
  
  <entry>
    <title>MATLAB常用内部函数</title>
    <link href="http://yoursite.com/2019/04/07/MATLAB%E5%B8%B8%E7%94%A8%E5%86%85%E9%83%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/04/07/MATLAB常用内部函数/</id>
    <published>2019-04-07T02:26:40.000Z</published>
    <updated>2019-04-07T03:46:50.408Z</updated>
    
    <content type="html"><![CDATA[<p>一、常用数学函数</p><p>三角函数有以弧度为单位和角度为单位的，以角度为单位的函数在后面加上d</p><p>abs可以求实数的绝对值、复数的模、字符串的ASCII码值</p><hr><p>二、矩阵的超越函数</p><p>1.矩阵平方根</p><p>sqrtm(A)用来计算A的平方根<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">程序：</span><br><span class="line">A=[4,3;2,6]</span><br><span class="line">B=sqrtm(A)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">A =</span><br><span class="line">     4     3</span><br><span class="line">     2     6</span><br><span class="line"></span><br><span class="line">B =</span><br><span class="line">    1.9171    0.6978</span><br><span class="line">    0.4652    2.3823</span><br></pre></td></tr></table></figure></p><hr><p>2.矩阵对数</p><p>logm(A)计算矩阵A的自然对数</p><hr><p>3.矩阵指数</p><p>expm(A)求矩阵指数<a href="https://www.codecogs.com/eqnedit.php?latex=e^{A}" target="_blank"><img src="https://latex.codecogs.com/png.latex?e^{A}" title="e^{A}"></a></p><hr><p>4.普通矩阵函数</p><p>funm(A,@fun)对方阵A计算由fun定义的函数的矩阵函数值</p><p>但是不可以用sqrtm</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、常用数学函数&lt;/p&gt;
&lt;p&gt;三角函数有以弧度为单位和角度为单位的，以角度为单位的函数在后面加上d&lt;/p&gt;
&lt;p&gt;abs可以求实数的绝对值、复数的模、字符串的ASCII码值&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;二、矩阵的超越函数&lt;/p&gt;
&lt;p&gt;1.矩阵平方根&lt;/p&gt;
&lt;p&gt;sqrtm
      
    
    </summary>
    
      <category term="MATLAB" scheme="http://yoursite.com/categories/MATLAB/"/>
    
    
      <category term="MATLAB" scheme="http://yoursite.com/tags/MATLAB/"/>
    
  </entry>
  
  <entry>
    <title>matlab变量及其操作</title>
    <link href="http://yoursite.com/2019/04/07/matlab%E5%8F%98%E9%87%8F%E5%8F%8A%E5%85%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/04/07/matlab变量及其操作/</id>
    <published>2019-04-07T01:58:12.000Z</published>
    <updated>2019-04-07T03:25:06.370Z</updated>
    
    <content type="html"><![CDATA[<p>一、变量与赋值语句</p><p>在matlab中，变量是字母为开头，后接字母、数字或者下划线的。</p><p>matlab区分大小写，标准函数必须用小写字母。</p><p>求解<a href="https://www.codecogs.com/eqnedit.php?latex=\frac{5&plus;cos47^{\circ}}{1&plus;|x-y|}" target="_blank"><img src="https://latex.codecogs.com/png.latex?\frac{5&plus;cos47^{\circ}}{1&plus;|x-y|}" title="\frac{5+cos47^{\circ}}{1+|x-y|}"></a>，其中<a href="https://www.codecogs.com/eqnedit.php?latex=x=\sqrt{7}-2i" target="_blank"><img src="https://latex.codecogs.com/png.latex?x=\sqrt{7}-2i" title="x=\sqrt{7}-2i"></a>，<a href="https://www.codecogs.com/eqnedit.php?latex=y=e^{\frac{pi}{2{\color{Blue}&space;}}}" target="_blank"><img src="https://latex.codecogs.com/png.latex?y=e^{\frac{pi}{2{\color{Blue}&space;}}}" title="y=e^{\frac{pi}{2{\color{Blue} }}}"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">程序：</span><br><span class="line">x=sqrt(7)-2i;</span><br><span class="line">y=exp(pi/2);</span><br><span class="line">z=(5+cos(47*pi/180))/(1+abs(x-y))</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">z =</span><br><span class="line">    1.4395</span><br></pre></td></tr></table></figure><hr><p>二、预定义变量</p><p>尽量不要使用i和j做变量名，当有复数运算的时候，可能会出现错误。</p><hr><p>三、变量的管理</p><p>1.内存变量的删除与修改</p><p>who可以显示当前变量，whos可以显示详细的信息</p><p>2.内存变量文件</p><p>可以使用save和load命令，把当前有用的一些变量的数值保存下来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">save 文件名 [变量名表]</span><br><span class="line">load 文件名 [变量名表]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、变量与赋值语句&lt;/p&gt;
&lt;p&gt;在matlab中，变量是字母为开头，后接字母、数字或者下划线的。&lt;/p&gt;
&lt;p&gt;matlab区分大小写，标准函数必须用小写字母。&lt;/p&gt;
&lt;p&gt;求解&lt;a href=&quot;https://www.codecogs.com/eqnedit.php?
      
    
    </summary>
    
      <category term="MATLAB" scheme="http://yoursite.com/categories/MATLAB/"/>
    
    
      <category term="MATLAB" scheme="http://yoursite.com/tags/MATLAB/"/>
    
  </entry>
  
  <entry>
    <title>MATLAB数值数据</title>
    <link href="http://yoursite.com/2019/04/06/MATLAB%E6%95%B0%E5%80%BC%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2019/04/06/MATLAB数值数据/</id>
    <published>2019-04-06T01:43:50.000Z</published>
    <updated>2019-04-06T04:13:46.943Z</updated>
    
    <content type="html"><![CDATA[<p>一、matlab数值数据</p><p>1.数值数据类型的分类</p><hr><p>整型</p><p>分为有符号数和无符号数：8、16、32、64</p><hr><p>浮点型</p><p>matlab中浮点型的默认类型是double，浮点型分为single和double，分别是4和8</p><hr><p>复型</p><p>分为实部和虚部，全部默认是双精度类型，其中虚部可以用i或者j表示</p><p>class函数可以用于获取某个数值的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">程序：</span><br><span class="line">class(9)</span><br><span class="line">结果：</span><br><span class="line">ans =</span><br><span class="line">double</span><br></pre></td></tr></table></figure><hr><p>2.数据的输出格式</p><p>matlab内部的数据都是用双精度存储的，可以用format改变数据输出个格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">format 格式符</span><br></pre></td></tr></table></figure><p>matlab默认的格式是short</p><p>二、matlab矩阵的表示</p><p>1.矩阵的建立</p><hr><p>利用直接输入法创建矩阵</p><p>矩阵中的元素用中括号括起来，按照行的顺序输入矩阵，同一行之间用逗号或者空格间隔，不同行的元素之间用分号间隔。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">程序：</span><br><span class="line">A=[1,2,3;4,5,6;7,8,9]</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">A =</span><br><span class="line">     1     2     3</span><br><span class="line">     4     5     6</span><br><span class="line">     7     8     9</span><br></pre></td></tr></table></figure><hr><p>利用已经创建好的矩阵建立更大的矩阵</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">程序：</span><br><span class="line">A=[1,2,3;4,5,6;7,8,9]</span><br><span class="line">B=[-1,-2,-3;-4,-5,-6;-7,-8,-9]</span><br><span class="line">C=[A,B;B,A]</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">C =</span><br><span class="line">     1     2     3    -1    -2    -3</span><br><span class="line">     4     5     6    -4    -5    -6</span><br><span class="line">     7     8     9    -7    -8    -9</span><br><span class="line">    -1    -2    -3     1     2     3</span><br><span class="line">    -4    -5    -6     4     5     6</span><br><span class="line">    -7    -8    -9     7     8     9</span><br></pre></td></tr></table></figure><p>还可以用实部矩阵和虚部矩阵，构成复数矩阵</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">程序：</span><br><span class="line">R=[1,2,3;4,5,6]</span><br><span class="line">I=[6,7,8;9,10,11]</span><br><span class="line">ri=R+i*I</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">ri =</span><br><span class="line">   1.0000 + 6.0000i   2.0000 + 7.0000i   3.0000 + 8.0000i</span><br><span class="line">   4.0000 + 9.0000i   5.0000 +10.0000i   6.0000 +11.0000i</span><br></pre></td></tr></table></figure><hr><p>二、冒号表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e1:e2:e3 %e1为初始值,e2为步长，e3为终止值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linspace(a,b,n) %a,b代表初始值和终止值，其中n代表产生的元素的个数</span><br></pre></td></tr></table></figure><hr><p>三、矩阵元素的引用</p><p>1.矩阵元素的引用方式</p><hr><p>矩阵元素通过下标来引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A(3,2)=200 %表示矩阵A第三行第二列的元素</span><br></pre></td></tr></table></figure><p>如果给出的矩阵下标大于原来的行数或者列数，matlab会将矩阵自动扩充，扩充的矩阵元素置为0</p><hr><p>矩阵元素通过序号来引用</p><p>矩阵元素按照列来存储</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">程序：</span><br><span class="line">A=[1,2,3;4,5,6]</span><br><span class="line">A(3)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">A=</span><br><span class="line">    1     2     3</span><br><span class="line">    4     5     6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line">    2</span><br></pre></td></tr></table></figure><p>矩阵元素的序号和下标，可以用sub2ind和ind2sub来相互转换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D=sub2ind(S,I,J) %S表示要转换的矩阵的行数和列数，通常用size函数获取，</span><br><span class="line">                 %I表示要转换矩阵的行下标，J表示要转换矩阵的列下标。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">程序：</span><br><span class="line">A=[1,2,3;4,5,6]</span><br><span class="line">D=sub2ind(size(A),[1,2;2,2],[1,1;3,2])</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">A =</span><br><span class="line">     1     2     3</span><br><span class="line">     4     5     6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D =</span><br><span class="line">     1     2</span><br><span class="line">     6     4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[I,J]=ind2sub(S,D) %S表示要转换的矩阵的行数和列数</span><br><span class="line">                   %D是序号，</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">程序：</span><br><span class="line">[I,J]=ind2sub([3,3],[1,3,5])</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">I =</span><br><span class="line"></span><br><span class="line">     1     3     2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">J =</span><br><span class="line"></span><br><span class="line">     1     1     2</span><br></pre></td></tr></table></figure><hr><p>2.利用冒号表达式获得子矩阵</p><p>A(i,j)表示A矩阵的i行j列，A(i,:)表示第i行的全部元素</p><p>可以用end表示最后一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">程序：</span><br><span class="line">A=[1,2,3;4,5,6;7,8,9]</span><br><span class="line">A(end,:)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">A =</span><br><span class="line">     1     2     3</span><br><span class="line">     4     5     6</span><br><span class="line">     7     8     9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line">     7     8     9</span><br></pre></td></tr></table></figure><hr><p>3.利用空矩阵删除矩阵的元素</p><p>将某些元素从矩阵中删除，可以采用将其置为空矩阵。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">程序：</span><br><span class="line">A=[1,2,3;4,5,6;7,8,9]</span><br><span class="line">A(:,[2,3])=[]</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">A =</span><br><span class="line">     1     2     3</span><br><span class="line">     4     5     6</span><br><span class="line">     7     8     9</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line">     1</span><br><span class="line">     4</span><br><span class="line">     7</span><br></pre></td></tr></table></figure><hr><p>4.改变矩阵的形状</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reshape(A,m,n) %在矩阵总元素保持不变的情况下，将矩阵重新排列成m*n的二维矩阵</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">程序：</span><br><span class="line">A=[1,2,3;4,5,6;7,8,9;10,11,12]</span><br><span class="line">reshape(A,3,4)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">A =</span><br><span class="line">     1     2     3</span><br><span class="line">     4     5     6</span><br><span class="line">     7     8     9</span><br><span class="line">    10    11    12</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line">     1    10     8     6</span><br><span class="line">     4     2    11     9</span><br><span class="line">     7     5     3    12</span><br></pre></td></tr></table></figure><p>reshape仅仅改变逻辑结构，但是不改变原矩阵的元素个数及存储顺序（存储顺序是按照列来的）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、matlab数值数据&lt;/p&gt;
&lt;p&gt;1.数值数据类型的分类&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;整型&lt;/p&gt;
&lt;p&gt;分为有符号数和无符号数：8、16、32、64&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;浮点型&lt;/p&gt;
&lt;p&gt;matlab中浮点型的默认类型是double，浮点型分为single和do
      
    
    </summary>
    
      <category term="MATLAB" scheme="http://yoursite.com/categories/MATLAB/"/>
    
    
      <category term="MATLAB" scheme="http://yoursite.com/tags/MATLAB/"/>
    
  </entry>
  
  <entry>
    <title>MATLAB基本操作</title>
    <link href="http://yoursite.com/2019/04/04/matlab%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/04/04/matlab基本操作/</id>
    <published>2019-04-04T02:51:38.000Z</published>
    <updated>2019-04-06T01:43:57.284Z</updated>
    
    <content type="html"><![CDATA[<p>一、交互式命令操作</p><p>1.命令行</p><p>一个命令行可以输入若干条命令，各个命令之间用逗号隔开，如果前一个后面有分号，就不用逗号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p=15,m=36//此时运行会显示p和m的值</span><br><span class="line">p=15；m=36//此时运行只会显示m的值</span><br></pre></td></tr></table></figure><p>2.续行符</p><p>假如第一行比较长的话，可以在第一行最后加上三个小黑点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p=15,...</span><br><span class="line">    m=1</span><br></pre></td></tr></table></figure><p>3.命令行的编辑</p><p>4.注释</p><p>注释以%开头</p><p>二、MATLAB功能演示</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=-2*pi:pi/180:2*pi;</span><br><span class="line">plot(x,2.^(-abs(x)),&apos;:&apos;,x,sin(x));</span><br></pre></td></tr></table></figure><img src="/2019/04/04/matlab基本操作/函数图像.jpg" title="函数图像"><hr><p>求方程<math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mn>2</mn><mi mathvariant="italic">X</mi><msup><mrow></mrow><mrow><mn>5</mn></mrow></msup><mo>&#x2D;</mo><mn>3</mn><mi mathvariant="italic">X</mi><msup><mrow></mrow><mrow><mn>3</mn></mrow></msup><mo>&#x2B;</mo><mn>7</mn><mn>1</mn><mi mathvariant="italic">X</mi><msup><mrow></mrow><mrow><mn>2</mn></mrow></msup><mo>&#x2D;</mo><mn>9</mn><mi mathvariant="italic">X</mi><mo>&#x2B;</mo><mn>1</mn><mn>3</mn><mo>&#x3D;</mo><mn>0</mn></mrow></math>的全部根。</p><p>程序代码是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p=[2,0,-3,71,-9,13]; %建立多项式系数向量</span><br><span class="line">x=roots(p) %调用root函数求解方程组的全部根</span><br></pre></td></tr></table></figure><p>求得的结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x =</span><br><span class="line">  -3.4914 + 0.0000i</span><br><span class="line">   1.6863 + 2.6947i</span><br><span class="line">   1.6863 - 2.6947i</span><br><span class="line">   0.0594 + 0.4251i</span><br><span class="line">   0.0594 - 0.4251i</span><br></pre></td></tr></table></figure><hr><p>求解线性方程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2x+3y-z=0</span><br><span class="line">8x+2y+3Z=4</span><br><span class="line">45x+3y+9z=23</span><br></pre></td></tr></table></figure><p>程序如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=[2,3,-1;8,2,3;45,3,9];</span><br><span class="line">b=[2;4;23];</span><br><span class="line">x=inv(a)*b %inv(a)用于求a的逆矩阵</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x =</span><br><span class="line">    0.5531</span><br><span class="line">    0.2051</span><br><span class="line">   -0.2784</span><br></pre></td></tr></table></figure><hr><p>求解<math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msubsup><mo>&#x222B;</mo><mrow><mn>1</mn></mrow><mrow><mn>0</mn></mrow></msubsup><mrow><mi mathvariant="italic">x</mi><mi mathvariant="italic">l</mi><mi mathvariant="italic">n</mi><mo>&#x28;</mo><mn>1</mn><mo>&#x2B;</mo><mi mathvariant="italic">x</mi><mo>&#x29;</mo><mi mathvariant="italic">d</mi><mi mathvariant="italic">x</mi></mrow></mrow></math></p><p>程序如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f=@(x) x.*log(1+x);</span><br><span class="line">integral(f,0,1)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ans =</span><br><span class="line">    0.2500</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、交互式命令操作&lt;/p&gt;
&lt;p&gt;1.命令行&lt;/p&gt;
&lt;p&gt;一个命令行可以输入若干条命令，各个命令之间用逗号隔开，如果前一个后面有分号，就不用逗号&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="MATLAB" scheme="http://yoursite.com/categories/MATLAB/"/>
    
    
      <category term="MATLAB" scheme="http://yoursite.com/tags/MATLAB/"/>
    
      <category term="基本操作" scheme="http://yoursite.com/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>学士论文目录大纲</title>
    <link href="http://yoursite.com/2019/04/04/%E5%AD%A6%E5%A3%AB%E8%AE%BA%E6%96%87%E7%9B%AE%E5%BD%95%E5%A4%A7%E7%BA%B2/"/>
    <id>http://yoursite.com/2019/04/04/学士论文目录大纲/</id>
    <published>2019-04-04T02:27:20.000Z</published>
    <updated>2019-04-04T02:46:15.101Z</updated>
    
    <content type="html"><![CDATA[<p>一、摘要</p><p>无线传感器网络是什么？</p><p>无线传感器现状的概述？</p><p>无线传感器的现状？</p><p>无线传感器面临的问题？</p><p>本文讨论的问题?</p><p>关键词？</p><p>二、绪论</p><hr><p>2.1课题的研究背景以及研究的意义</p><p>无线传感器的起源和发展详细历程？</p><p>无线传感器网路的特点？</p><p>无线传感器网络发展到现在的主要问题是什么？</p><p>针对这些主要问题的现有解决方法有哪些？</p><hr><p>2.2本文的主要研究问题和研究任务</p><hr><p>2.3本文的创新点</p><hr><p>三、无线传感器网络</p><p>无线传感器网络是……</p><hr><p>3.1无线传感器网络的结构</p><hr><p>3.2无线传感器网络的特点</p><hr><p>3.3无线传感网络节点结构</p><hr><p>3.4传感器节点的限制因素</p><hr><p>3.5无线传感器的应用</p><hr><p>3.6无线传感器网络覆盖问题</p><hr><p>3.7无线传感器网络覆盖技术参数</p><p>网络生命</p><p>覆盖率和连通度</p><p>算法复杂性与精确性</p><p>工作节点比</p><p>网路可扩展性支持</p><p>算法实施策略</p><hr><p>四、遗传算法概述</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、摘要&lt;/p&gt;
&lt;p&gt;无线传感器网络是什么？&lt;/p&gt;
&lt;p&gt;无线传感器现状的概述？&lt;/p&gt;
&lt;p&gt;无线传感器的现状？&lt;/p&gt;
&lt;p&gt;无线传感器面临的问题？&lt;/p&gt;
&lt;p&gt;本文讨论的问题?&lt;/p&gt;
&lt;p&gt;关键词？&lt;/p&gt;
&lt;p&gt;二、绪论&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2.1课题的
      
    
    </summary>
    
      <category term="学士论文相关" scheme="http://yoursite.com/categories/%E5%AD%A6%E5%A3%AB%E8%AE%BA%E6%96%87%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>学士论文参考文献</title>
    <link href="http://yoursite.com/2019/04/03/%E5%AD%A6%E5%A3%AB%E8%AE%BA%E6%96%87%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE/"/>
    <id>http://yoursite.com/2019/04/03/学士论文参考文献/</id>
    <published>2019-04-03T06:26:37.000Z</published>
    <updated>2019-04-04T02:26:49.740Z</updated>
    
    <content type="html"><![CDATA[<p>1、基于遗传算法的无线传感器网络优化 孙雁鸣</p><p>2.基于遗传算法的无线传感器网络覆盖优化 江苏大学 曹美霞</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、基于遗传算法的无线传感器网络优化 孙雁鸣&lt;/p&gt;
&lt;p&gt;2.基于遗传算法的无线传感器网络覆盖优化 江苏大学 曹美霞&lt;/p&gt;

      
    
    </summary>
    
      <category term="学士论文相关" scheme="http://yoursite.com/categories/%E5%AD%A6%E5%A3%AB%E8%AE%BA%E6%96%87%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>基于遗传算法的无限传感器网络的优化</title>
    <link href="http://yoursite.com/2019/03/31/%E5%9F%BA%E4%BA%8E%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%A0%E7%BA%BF%E4%BC%A0%E6%84%9F%E5%99%A8%E7%BD%91%E7%BB%9C%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2019/03/31/基于遗传算法的无线传感器网络的优化/</id>
    <published>2019-03-31T14:36:18.000Z</published>
    <updated>2019-04-04T02:46:27.231Z</updated>
    
    <content type="html"><![CDATA[<p>一、摘要</p><p>无线传感器网络=若干个传感器节点（低成本、低功耗、多功能）</p><p>有线网络布网费用高，维护繁琐</p><p>无线传感器网络的最大问题：无线床啊其节点的能量消耗极大，限制了网络的工作寿命</p><p>关键词：无线传感器网络，优化覆盖，遗传算法，优化</p><p>二、绪论</p><p>2.1 课题的研究背景以及研究的意义</p><p>无线传感器网络的研究起源于……</p><p>无线传感器网络=无线通信技术+大量的传感器节点+自组织方式</p><p>大面积环境的数据+不适宜部署有线网络的领域</p><p>无线传感器网络具有成本低、鲁棒性高、功耗小、灵活性高、布网简单、智能化强、维护便捷</p><p>无线传感器大规模投入使用面临的问题：</p><p>能量供应问题：目前的解决方案包括高能电池、传感器网络能量收集技术、降低传感器功率、电池无线充电技术</p><p>节点失效及补充问题：无线传感器网中节点可能会出现周围节点通信不畅或者由于电池能量耗尽而脱离网络，如何修复失效节点或者重新构建网络，有效进行通信。</p><p>成本问题：无线传感器网络在实际使用中需要数量庞大的微型传感器节点，节点的成本就会制约网络的发展。</p><hr><p>国内外研究现状</p><p>传感器网络按照对覆盖区域的不同要求，把覆盖问题分为区域覆盖、点覆盖、栅栏覆盖。</p><hr><p>区域覆盖：柳立峰，在保证足够的网络覆盖能力的前提下，能够关闭掉冗余节点，减少网络的总能量的消耗。区域覆盖要求节点完全覆盖整个目标区域，而如何能够使网络区域中的每个点均被传感器节点覆盖是考虑最多的。</p><p>基于冗余节点判断的覆盖控制算法：</p><p>由于传感器节点分布密度高，某个点或某区域往往同时被多个节点覆盖，称为“覆盖冗余”。</p><p>基于多重K级覆盖算法：</p><p>如果被监测区域的每个点至少在K个传感器节点的感知范围内，则称该网络具有K级覆盖。</p><p>基于网络连通性的覆盖算法：</p><p>如果网络中任意两节点可以进行通信，则该网络是连通的。基于网络连通性的覆盖控制算法的研究目标是保持足够覆盖的前提下，选择最小工作节点数目在位置距离上满足全网通信。</p><hr><p>点覆盖：将传感器节点划分成若干个不相交的集合，每个集合能够完全覆盖所有目标点。任何时刻只要有一个传感器节点集合处于工作状态，其他集合将被依次唤醒。</p><p>点覆盖的优化就是确定不相交集合的最大数，相当于延长了每个传感器两次激活的时间间隔，使得整个网络寿命也得到延长。</p><hr><p>栅栏覆盖：</p><p>栅栏覆盖一般存在于战场环境下，在一片节点部署的区域内，目标可能以任何路径穿过这片区域。栅栏覆盖有两方面的内容：一是要敌方穿越我方区域时不被发现的概率最下；二是我方在穿越地方区域时不被发现的概率最大。</p><p>基于最差情形和最好情形的覆盖算法：</p><p>最大突破路径是指在一条路径上，每一个点距离最近节点的距离最大，那么目标在一定时间沿着这条路径穿越时不被发现的可能性最大。</p><p>最大支持路径：如果存在这样一条路径，其上的每一个点距离最近节点的距离最小，那么目标在一定的时间沿着这条路径穿越时被发现的可能性最大，这条路径就称为最大支持路径。</p><p>基于暴露模型的覆盖算法：</p><hr><p>本文的主要研究内容：</p><p>介绍了无线传感器网络及其特点，并对传感器网络覆盖问题的国内外研究现状进行了分析和归纳。</p><p>采用了遗传算法对节点优化配置，提高了网络的覆盖能力。</p><p>通过MATLAB仿真，验证上述算法。</p><p>2.2 遗传算法的发展</p><p>遗传算法 高度并行 随机 自适应</p><p>基本理念来源于达尔文的遗传学说</p><p>GA在理论上具有解决任何寻优问题的能力，具有极其广泛的应用价值。</p><p>Holland教授 模式定理：优良个体的样本数目将以指数规律增长，从而确保了遗传算法是 一个能够用来搜寻最优可行解的过程。</p><p>2.3无线传感器网络研究的发展状况</p><p>2003年，美国《技术评论》杂志评出了对人类未来生活产生重大影响的新兴科技，被列为第一位的就是无线传感网络技术。</p><p>无线传感器网络最开始被用在军事的监视系统中</p><p>无线传感网络是集通信技术、传感器技术和计算技术于一身的产物</p><p>2.4 本文的应用背景</p><p>无线传感器在露天矿场的边坡检测的例子</p><p>2.5本文研究目的和主要任务</p><p>无线传感器网络最难解决的缺点是：和有线网络相比，无线传感器网络的工作周期极大的受到能源的限制。充电或者更换电池会限制网络中的节点的通信和数据的处理，但是个别节点失灵不会影响整体的工作。</p><p>优化无线传感器网络的关键是延长整个网络的工作寿命。</p><p>2.6 本文的创新点</p><p>三、无线传感网络</p><p>无线传感网络是……</p><p>无线传感网络可以分为动态网络和静态网络两种。</p><p>3.1无线传感网络结构</p><p>无线传感网路主要由传感器节点、任务管理节点、汇聚节点组成。</p><p>传感器节点采集到的数据通过多跳网络或者单跳网络传输到簇头，再到汇聚节点，最终通过卫星或者互联网传输到管理节点。</p><p>传感器节点一般是微型的嵌入式系统，能力较弱，通过携带电池通电。无线传感器网络中汇聚节点的能力比较强，传感器网络和外部网络就是通过汇聚节点相连接的。</p><p>对于多跳网络来说，每个传感器节点必须兼顾终端和路由器的功能，主要功能：信息采集、数据存储和再次的转发。</p><p>对于单跳的网络来说，簇头节点就是路由器和终端。</p><p>3.2无线传感网络的特点</p><p>无线传感器网络相对于其他传统网络的特点：</p><p>组网的规模够大，可以进行动态组网或者静态组网，而且容错性加强</p><p>单跳、多跳、自组织：传感器的通信距离是有限的，当超过一定的距离的时候，自动组成簇，通过多跳的方式从簇头传递到汇聚节点。</p><p>低功耗：环境恶劣，更换电池不容易，所以传感器节点必须是低功耗的。</p><p>数据作为中心：传统网络中，每一个工作节点必须在全网中有唯一的一个编号作为其通信地址；但是在无线传感器网路中，获得所需要的数据是第一要务，数据是从哪里来的是不重要的。</p><p>通信的覆盖范围较小。</p><p>数据处理：传统网络的主要职责是数据传输，自终端上处理数据，中间的节点仅仅负责传输数据；但是对于无线传感网络来说，中间节点同时具备数据传输和数据处理的功能。</p><p>低成本：每个传感器节点都应该低成本，低价格。</p><p>计算能力有限：传感器节点的数目巨大，使得在设计单个节点的时候，要尽量降低制造成本，尽量往微型化方向发展，也使得单个节点自身的运算处理能力地下。</p><p>无线传感器网络规模较大，拓扑结构复杂：传感器节点的精确位置预先不能确定，节点之间的拓扑关系事先也不知道，所以传感器节点要具有一定的自组织能力，能够通过拓扑控制机制和网络协议自动形成监控数据的网络。</p><p>3.3无线传感网络节点结构</p><p>传感网络节点的组成通常是由四部分组成的：处理器模块、传感器模块、能量供应模块、无线通信模块</p><p>数据采集、数据传递、数据处理和能量供应</p><p>3.4传感器节点的限制因素</p><p>电源能量有限：处理器和传感器浪费的能量少，主要消耗在无线通信模块。（此处可以配图说明）</p><p>通信能力有限：E=kd^n。其中参数n的取值在2到4之间，干扰越大n的取值也越大，n的取值通常设置为3，随着距离的增加，能量的损耗也会增加，所以传感器之间的距离应该在100米以内。</p><p>3.5无线传感器的应用</p><p>军事领域</p><p>航空领域</p><p>救灾领域</p><p>工业自动化领域</p><p>电力传输系统</p><p>3.6无线传感器网络覆盖问题</p><p>根据覆盖对象的不同，将静态无线传感器网络的覆盖问题分为三类：区域覆盖、点覆盖、栅栏覆盖</p><p>区域覆盖要求目标区域内的每个点至少被一个节点覆盖；</p><p>点覆盖考虑的是对若干离散目标点的覆盖，节点随意部署在若干个离散目标点附近，将节点划分为若干个互不相交的节点，使得集合能够完全覆盖这些目标点。任意时刻只有一个节点集合工作，使其他集合全部处于休眠状态。</p><p>栅栏覆盖：关注网络对移动目标的检测能力，当移动目标沿着任意路径穿越网络部署区域，目标不被发现的概率最小。</p><p>3.7无线传感器网络覆盖技术参数</p><p>网络生命：传感器网络的监控使长期的，尽管单个传感器节点的成本随着微电子技术的发展不断进步而降低，但是数量众多的传感器节点费用仍旧比较高；并且单个节点的能量十分有限，传感器节点工作的环境一般十分恶劣，更换电池基本上不可能。如何最大程度的降低节点的能耗来延长网络的生命期是当前研究的一个重要问题。</p><hr><p>覆盖率和连通度：覆盖率是指所有传感器覆盖的总面积与目标区域总面积的比值，覆盖率小于等于1.</p><p>连通度则是指网络中的任何一个节点都要至少与网络中的其他几个节点相连通，连通度至少为1.</p><hr><p>算法复杂性与精确性</p><p>算法复杂度包括网络运行时间复杂度、算法的实现复杂度、网络内部节点之间的复杂同心度。算法的准确性，用来降低算法的复杂度，提高网络运行效率。</p><hr><p>工作节点比</p><p>任一时刻工作节点的数量都小于网络中所部署的节点数量。在保证覆盖的服务质量，工作节点数量越小，网络能量消耗越小，则算法越有效，进而延长网络生存寿命。</p><hr><p>网路可扩展性支持</p><p>节点的丢失与参与要求网络的可扩展性，没有可扩展性做保证，网络性能会随着规模的增加而降低。</p><hr><p>算法实施策略</p><p>覆盖控制算法有三类：分布式、集中式、混合式</p><p>集中式算法的能量消耗较大、网络性能和算法精度较差。</p><p>分布式算法利用本地信息，能耗能量较小且网络性能等方面都较好。</p><p>四、遗传算法概述</p><p>遗传算法受到了生物进化理论的启发，GA以自然界中的优胜劣汰和生物遗传机制作为理论的基础。</p><p>简单阐述遗传算法的概念。</p><p>4.1基本遗传算法</p><p>Goldberg研究出的传统的GA，只使用选择算子、交叉算子和变异算子，是GA的雏形。</p><p>编码方式：二进制编码、浮点数编码、量子编码</p><hr><p>适应度函数：适应度函数和目标函数，求解最大值和最小值的问题</p><p>适应尺度变换：所谓的适应尺度变换，就是为了解决GA在初期的早熟问题和GA在后期的竞争力变弱的问题。</p><p>GA初期的早熟问题：假设个体的数目相对较少，如果此时群体中有一部分个体的适应度相对较高，那么他们遗传到下一代的概率就会非常高，但是过多的相似的个体进入下一代之后，他们经过交叉和变异产生的后代的多样性会减少，导致GA的早熟现象。早熟问题的出现主要就是由选择算子的不当造成的。</p><p>GA的早熟现象的解决办法：在GA运行的初期，将排名靠前的那一部分的个体的适应度相对调低，使其进入下一代的比例相对减少，保持下一代的多样性。</p><p>GA运行到后期，由于全部的个体其实已经逐渐的逼急最优解，此时，大家的适应度相差不大，就会导致竞争的逐渐变弱，最后使得竞争变成了随机的选择。</p><p>GA后期的解决办法：当GA运行到后期的时候，把排名相对靠前的一部分的个体的适应度相对调高，提高竞争性，但是同时不能改变排名的原有顺序。</p><p>尺度变换的三种方法：线性尺度变换、乘幂尺度变换与指数尺度变换</p><p>线性尺度变换：F’=aF+b,其中F是原适应度。</p><p>a和b一般需要满足的条件：尺度变换后原种群的适应度的平均值等于全部种群中个体的新适应度的平均值（是否代表，前后的平均值需要保持一致？）；尺度变换后的最大值要与原适应度平均值的指定倍数要相等，就是F’max=CFmax.</p><p>乘幂尺度变换：新的适应度是原有适应度的幂次。</p><p>指数尺度变换：</p><hr><p>选择算子</p><p>选择操作就是指从旧的种群中以一定的概率选取若干个个体遗传到下一代群体中，选择操作的是建立在适应度的评价的基础上。</p><p>GA的早熟问题就是选择算子的不当造成的，导致进化停止不前或者种群中适应度较大的个体会误导种群进化的方向，使遗传失去了多样性。</p><p>常见的选择操作策略：轮盘赌、随机竞争、最佳保留、均匀排序选择和随机联赛选择</p><p>选择选择操作策略与编码方式无关。</p><hr><p>最优保存策略</p><p>由于适应度最佳的个体可能在选择、交叉和变异的过程中被破坏掉，种群的平均适应度会因此而降低并且会很大程度上影响到GA的运行效率以及收敛性，而且GA运行的过程中要尽可能的将种群中适应度最好的个体保留到下一代。</p><p>为了实现上面的目的，我们可以采用最优保存策略来完成优胜劣汰操作，任何交叉和变异操作都会对当前种群中适应度最高的个体失效，用这个最好的替换经过选择交叉变异后所产生的新一代中的最差的个体。</p><p>最优保存策略同样存在问题，它容易加速某个最优个体的扩散，算法的全局搜索能力受到了极大的限制，因此最优保存策略必须配合其他一些选择操作方法来使用。</p><hr><p>交叉算子</p><p>交叉运算就是指从种群中选取两个个体，随机选择一点或者多点染色体进行位置交换，通过两个染色体的交换组合，来产生新的优秀个体。</p><p>交叉算法也是遗传算法区别于其他算法的主要特征。</p><p>常用的配对算法策略是：将种群中的M个优秀个体随机打乱，再组成M/2个配对个体组。</p><p>个体编码和交叉算子的设计必须被统一考虑。</p><p>单点交叉：设染色体的长度为L，则共有L-1个可能的交叉点位置，在[1，L-1]的范围内，随即的选区一个整数数值K作为交叉点，然后交叉K点之后的基因片段。</p><p>两点交叉：交叉的是两个点之间的基因片段。</p><p>算术交叉：算术交叉是指通过线性组合的两个父代个体出产两个新的个体，只是只有浮点数编码的个体才能进行算术交叉运算。</p><p>量子交叉：当两个相同的个体出现的时候，普通的交叉方法在遗传算法的运行中就不会再奏效。</p><p>但是量子具有相干的特性，我们可以利用量子的这个特点，构造出一种全新的交叉操作，全干扰交叉。</p><hr><p>变异算子</p><p>变异操作是指个体编码串中的某些基因值变成其他的数值。</p><p>变异算子有效的维持了种群的多样性，早熟现象的得到了很好的控制。</p><p>基本位变异：指定某一位或者某几位基因的变异概率。这种操作方式只能改变几个基因的数值，而且变异发生的概率相对较低，作用的效果也不是很明显。</p><p>均匀变异：每个基因都有一定的概率产生变异。均匀变异适合应用在GA运行的初期。</p><hr><p>遗传算法运行参数</p><p>遗传算法中需要提前设定的算法参数主要有：种群的大小M、终止进化的代数G、交叉概率Pe、变异概率Pm等。</p><p>种群大小的选择：种群数目过小，容易引起遗传算法的早熟，种群的数目过大，则会导致遗传算法的速度降低。M的取值范围通常应该是20-100.</p><p>终止进化代数G：决定遗传算法运行的到哪一代停止。</p><p>交叉概率Pe：当交叉概率过大的时候，种群的优良模式会很容易受到破坏，但是交叉概率过小的时候，产生新的个体的速度会变慢。取值通常应该在0.4-0.99比较合适。</p><p>变异概率Pm：取值过大，种群中较好的个体可能被破坏掉；当取值过小，产生新个体和抑制早熟就会比较差，变异概率的通常取值是0.0001-0.1.</p><p>五、无线传感网络模型构造</p><p>5.1网络模型</p><p>10*10的正方形网格，传感器节点被放置在网格的100个交叉点上。假设传感器是相同的，但是传感器的状态是不同的。这里假设传感器节点能量是可以控制的，可以人为的在基站调节传感器节点的发射功率。</p><p>节点被分到不同的簇，每一个簇中选出一个节点作为簇头，簇中的节点直接与簇头进行通讯（单跳），簇头与远程基站进行通讯（单跳）</p><p>簇头的能量消耗比较大。</p><hr><p>无线传感器的网路覆盖类型：</p><p>根据应用可以分为时间驱动类型和事件驱动类型。（时间驱动类型是指按照时间启动，事件驱动类型是指只有当发生一定的事件才会启动，Q：是否是指没有发生事件的时候，传感器处于一种低功耗的问题）</p><p>根据覆盖对象，静态传感器网络可以分为：目标覆盖、栅栏覆盖和区域覆盖。（Q：什么是栅栏覆盖）</p><p>根据节点的部署方式，可以分为节点确定性部署，随机性部署以及可移动部署。</p><p>根据节点的类型，可分为同构节点覆盖、异构节点覆盖以及混合节点覆盖等。</p><hr><p>从应用角度归纳覆盖的分类</p><p>按目标特性：静态目标覆盖和动态目标覆盖。静态目标覆盖主要考虑的是覆盖的全面性以及对覆盖冗余节点的处理。</p><p>按配置方式：根据节点是否需要知道自身位置信息，可以将覆盖问题分为确定性覆盖、随机性覆盖。随机覆盖所要解决的问题是对节点随机分布在传感区域而预先没有得到自身位置及进行讨论。</p><p>按感知类型：目前的感知类型主要有两类：二进制感知模型和指数感知模型。</p><p>5.2适应度函数的建立</p><p>休眠参数</p><p>休眠节点误差：用来限制无线传感器网络中休眠节点的数量。当无线传感器网络休眠节点的数目超过总节点数的50%的时候，网络的连通性就会受到破坏。</p><hr><p>连通性参数</p><p>节点覆盖率：</p><p>簇中节点个数误差：每个簇最多携带的节点数目应该是有限制的。</p><p>超限节点误差：统计超出通信距离的传感器节点占整个网络节点数的比例。</p><hr><p>能量参数</p><p>网络总体能量的消耗：簇头节点、高功率发射节点、低功率发射节点、休眠节点，其中休眠节点的能耗为0；</p><p>通讯能量损耗：节点与簇头节点进行通讯所消耗的能量。</p><p>电池惩罚值：影响节点下一个周期的工作状态，从而使网络的工作时间最长。</p><p>六、基于遗传算法无线传感网络能量优化实验</p><p>6.1 串行遗传算法实验</p><p>网络中节点的四种工作模式：簇头模式、休眠模式、高功率发射模式、低功率发射模式。</p><hr><p>编码机制</p><p>采用二进制编码，01编码即可</p><p>经过实验种群数目是80，单点交换概率为0.8，突变概率为0.005，适应度的数值最大。</p><p>尽量可能让运行能量消耗最小，簇头节点减少，低功率发射节点增加，高功率发射节点减少。</p><p>6.2 并行遗传算法实验</p><p>使用串行遗传算法进行实验，要进行大量适应度的计算，所以进行并行遗传算法。</p><p>应用基于种群进行分组遗传算法，一个种群划分成多组种群，把划分好的子种群及遗传算法分别放置在不同的电脑上。</p><p>将各个电脑上的程序和数据运行一个周期，将各个电脑之间再以适当的方式进行一些信息的交换。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、摘要&lt;/p&gt;
&lt;p&gt;无线传感器网络=若干个传感器节点（低成本、低功耗、多功能）&lt;/p&gt;
&lt;p&gt;有线网络布网费用高，维护繁琐&lt;/p&gt;
&lt;p&gt;无线传感器网络的最大问题：无线床啊其节点的能量消耗极大，限制了网络的工作寿命&lt;/p&gt;
&lt;p&gt;关键词：无线传感器网络，优化覆盖，遗传算
      
    
    </summary>
    
      <category term="学士论文相关" scheme="http://yoursite.com/categories/%E5%AD%A6%E5%A3%AB%E8%AE%BA%E6%96%87%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="遗传算法" scheme="http://yoursite.com/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
      <category term="无线传感器网络优化" scheme="http://yoursite.com/tags/%E6%97%A0%E7%BA%BF%E4%BC%A0%E6%84%9F%E5%99%A8%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>初识遗传算法</title>
    <link href="http://yoursite.com/2019/03/31/%E5%88%9D%E8%AF%86%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/31/初识遗传算法/</id>
    <published>2019-03-31T03:04:59.000Z</published>
    <updated>2019-04-03T01:03:12.123Z</updated>
    
    <content type="html"><![CDATA[<p>一、遗传算法基本知识</p><p>1.遗传算法的遗传操作：选择、交叉、变异（选择出好的近似解，然后进行交叉和变异，就会产生新的种群）</p><p>交叉(crossover)：两个染色体的某一相同位置处DNA被切断，前后两串分别交叉组合形成两个新的染色体。也称基因重组或杂交；</p><p>2.遗传算法的核心内容：参数编码、初识群体的设定、适应度函数的设计、遗传操作设计、控制参数</p><p>适应度：度量某个物种对于生存环境的适应程度。</p><p>3.遗传问题是从种群开始的，种群是由个体组成的，个体实际上是染色体带有特征的实体。染色体中控制某一特征的基因组合，决定了该特征的外在表现形式，所以在一开始需要实现从表现型到基因型的映射，即编码工作。</p><p>4.遗传算法可以看作是多元函数求最优解，多元函数可能存在很多的极大值或者极小值，遗传算法就是找出其中的最大值或者最小值。</p><p>寻找最大值的方法就像袋鼠跳，我们希望袋鼠会跳到最高的位置。</p><p>5.袋鼠跳的几种方式</p><p>爬山算法：一只袋鼠在一个山峰，于是朝着不远处的另一个更高的山峰跳过去，但是第二个山峰不一定就是最高的。局部的最优解不一定是全局的最优解，有可能更远的地方有一个比现在的山峰还要高的山峰，但是那个山峰超出了袋鼠的跳跃范围（或者说认为设定的约束条件）</p><p>模拟退火：</p><p>遗传算法：有很多袋鼠，它们降落到喜玛拉雅山脉的任意地方。这些袋鼠并不知道它们的任务是寻找珠穆朗玛峰。但每过几年，就在一些海拔高度较低的地方射杀一些袋鼠。于是，不断有袋鼠死于海拔较低的地方，而越是在海拔高的袋鼠越是能活得更久，也越有机会生儿育女。就这样经过许多年，这些袋鼠们竟然都不自觉地聚拢到了一个个的山峰上，可是在所有的袋鼠中，只有聚拢到珠穆朗玛峰的袋鼠被带回了美丽的澳洲。</p><p>二、遗传算法的实现过程</p><p>1、建立表现型和基因型的映射关系</p><p>假设我们需要找出最适应在寒冷地区生存的人类的某一条染色体的编码，假设该染色体上有十个基因片段，十个基因片段的排序决定了人类对于寒冷的耐受性。</p><p>2.随机初始化一个种群</p><p>随机初始化一个种群，意味着这一个种群中人，十个基因的排列顺序的速记排列的。</p><p>3.适应度的评估</p><p>接下来测试每个人对寒冷的耐受能力，当然是越能忍受寒冷越好。</p><p>4.选择</p><p>按照某种规定做优化的选择，比如每隔一段时间淘汰掉耐受能力最后的20%。</p><p>5.基因的交叉</p><p>让生存下来的人类繁衍后代，然后产生下一代袋鼠。</p><p>6.基因的变异</p><p>让存活下来的一部分的基因序列随机改变一下排序。（应规定随机变异的程度，比如不能超过四个基因的位置变化之类的，或者不允许第一个和最后一个基因突变）</p><p>总结：遗传算法不需要费心去寻找最优解，而是把那些不好的存在抹杀就可以了.</p><p>三、遗传算法的具体实现</p><p>1、编码</p><p>遗传算法的编码主要有三类：二进制编码、浮点编码、符号编码、量子编码</p><p>1.1二进制编码：就是用0和1进行编码</p><p>二进制编码的缺点：个体长度较短的时候，可能达不到精度的要求；个体长度较大的手，会增加遗传算的搜索空间（当个体的长度较短的时候，比如只有两个01、00、10、11，假设寻找会使人的头发显现黑色基因，通过最简单的比较就可知道那两个比较好，假设是11和10，利用这两个进行杂交会出现的结果就是10和11，这时候就无法判断到底是哪个比较好了）（当个体的长度过长的手，交叉或者变异之后的变数会增大，会给搜索最佳算法增加难度）</p><p>假设用ｎ位二进制来编码，则二进制编码的精度是（Umax-Umin）/(2^n-1),</p><p>1.2浮点编码：个体的每个基因值用某一范围内的一个浮点数来表示</p><p>浮点编码的优点：</p><p>适用于在遗传算法中表示范围较大的数值</p><p>适用于精度要求较高的遗传算法</p><p>适用于较大空间的遗传搜索</p><p>降低了遗传算法的计算复杂性，提高了运算的速率</p><p>1.3符号编码法</p><p>1.4量子编码方法</p><p>每一个量子位除了0或者1以外，还可以处于两者的叠加状态，叠加状态是指0和1的任意线性叠加。</p><p>2、袋鼠的染色体编码</p><p>3、评价个体的适应度-适应度函数</p><p>目标函数与适应度函数：求解最大值和最小值的问题</p><p>求解最大值的问题</p><pre><code>F(X)=f(X)+Cmin,if f(X)+Cmin &gt; 0    =0        ,if f(X)+Cmin &lt;= 0    其中Cmin为一个相对较小的数</code></pre><p>求解最小值的问题</p><pre><code>F(X)=Cmax-f(X),if f(X)&lt;Cmax    =0        ,if f(X)&gt;Cmax</code></pre><p>适应度尺度变换</p><p>GA的早熟现象：GA运行的初期阶段，如果种群的数目相对较小，而且在种群中存在一部分适应度相对比较好的个体，这些个体就会比较容易生存下去，这些相同或者近似的个体繁殖出来的下一代，多样性会受到影响，这就是GA的早熟现象.</p><p>GA的早熟现象的解决办法：我们可以在初期降低那些适应度的数值相对较高的个体的适应度，使其在下一代中的比例相对降低，但是同时又不会改变排列顺序（这就是适应度的缩小）</p><p>GA运行的后期阶段：在GA运行的后期阶段，因为种群中所有个体的适应度相差不大，就会导致竞争变弱，导致竞争过程变成一种随机的选择过程，因此在此时我们需要将那些排名相对较高的个体的适应度调高一些，但是同时不改变排列的原有顺序。（这就是适应度的扩大）</p><p>适应尺度的变换一共有三种变换方法：线性变换、乘幂变换、指数变换</p><p>线性变换：F=aF+b ,其中a和b的数值要满足一定的条件。</p><p>新的种群适应度的平均值要和原有的种群适应度的平均值保持一致；而且新的种群的最大的适应度的数值，应该满足Fmax=CFmax</p><p>乘幂变换：</p><p>尺度变换：</p><p>4、选择函数</p><p>轮盘赌选择：个体进入下一代的概率=个体的适应度数值/整体的适应度数值和（选择误差比较大）</p><p>随机竞争选择：每次按照轮盘赌选择一对个体，然后让这两个个体进行竞争，适应度高的被选中，如此反复。（但是轮盘赌选择的个体是如何选择的）</p><p>最佳保留选择：首先按轮盘赌选择方法执行遗传算法的选择操作，然后将当前群体中适应度最高的个体结构完整地复制到下一代群体中。（那么适应度不高的个体应该如何选择）</p><p>期望值选择：第一步，计算群体中每个个体在下一代群体中的生存期望数值N；第二步，若某一个体被选中参与交叉运算，则它在下一代中的生存期望数目减去0.5，若某一个体未 被选中参与交叉运算，则它在下一代中的生存期望数目减去1.0。（此处的选择是如何选择的）；第三步，随着选择过程的进行，若某一个体的生存期望数目小于0时，则该个体就不再有机会被选中。</p><p>确定式选择：第一步，计算群体中的各个个体在下一代群体中的生存期望数目；第二步，用N的整数部分确定各个对应个体在下一代群体中的生存数目；第三步，用N的小数部分对个体进行降序排列，顺序去前M个个体加入下一代群体中。（假设得出来的N的数值分别为3.1、3.2、3.5、4.5、5.5，表示每一个在下一代中的期望的数目有3、3、3、4、5，其中3的有三个，所以可以降序排列，取第一个，就是3.3）</p><p>无回放余数随机选择：</p><p>均匀排列：对群体中的所有个体按照适应度的大小进行排序，根据排序来分配每个个体被选中的概率。</p><p>最佳保存策略：适应度最高的不参与交叉和变异运算，而是用这个来代替，经过交叉和变异之后，适应度最低的个体。</p><p>随机联赛选择：随机选取N个，然后将适应度最高的一个个体遗传到下一代中。</p><p>排挤选择：新产生的子代，会替代或者排挤相似的旧的父代的个体，提高群体的多样性。</p><p>5、交叉</p><p>所谓交叉，是指相互配对的两个染色体，按照某种方式交互部分基因，从而形成两个新的个体。</p><p>适用于二进制和浮点编码个体的交叉算子：</p><p>单点交叉：只有一个交叉点，在该点交换部分染色体。</p><p>两点交叉和多点交叉：</p><p>均匀交叉：每个基因片段以相同的交叉概率进行交换，形成两个新的个体。</p><p>算术交叉：由两个个体的线性组合而产生出两个新的个体。该操作对象一般是由浮点数编码表示的个体。</p><p>6.变异</p><p>所谓变异，就是指某个基因，用其他等位基因来替换。</p><p>变异算子：</p><p>基本位变异：对个体编码串中以变异概率、随机指定的某一位或某几位仅因座上的值做变异运算。</p><p>均匀变异：用一个范围内的随机数，替换编码串中的原有数值（用一个较小的概率）</p><p>边界变异：随机的取基因座上的两个对应边界基因值之一去替代原有基因值。特别适用于最优点位于或接近于可行解的边界时的一类问题。（什么是边界基因值）</p><p>非均匀变异：</p><p>高斯近似变异：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、遗传算法基本知识&lt;/p&gt;
&lt;p&gt;1.遗传算法的遗传操作：选择、交叉、变异（选择出好的近似解，然后进行交叉和变异，就会产生新的种群）&lt;/p&gt;
&lt;p&gt;交叉(crossover)：两个染色体的某一相同位置处DNA被切断，前后两串分别交叉组合形成两个新的染色体。也称基因重组或杂
      
    
    </summary>
    
      <category term="学士论文相关" scheme="http://yoursite.com/categories/%E5%AD%A6%E5%A3%AB%E8%AE%BA%E6%96%87%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="遗传算法" scheme="http://yoursite.com/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>123</title>
    <link href="http://yoursite.com/2019/03/07/123/"/>
    <id>http://yoursite.com/2019/03/07/123/</id>
    <published>2019-03-07T10:38:30.000Z</published>
    <updated>2019-03-07T10:38:30.192Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
