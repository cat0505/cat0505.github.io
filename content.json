{"meta":{"title":"忽如远行客","subtitle":"人生天地间，忽如远行客","description":null,"author":"二次元阿宅","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2019-03-06T01:10:02.000Z","updated":"2019-03-06T01:15:40.558Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2019-03-06T01:14:31.000Z","updated":"2019-03-06T01:15:17.325Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"初识遗传算法","slug":"初识遗传算法","date":"2019-03-31T03:04:59.000Z","updated":"2019-03-31T11:36:13.402Z","comments":true,"path":"2019/03/31/初识遗传算法/","link":"","permalink":"http://yoursite.com/2019/03/31/初识遗传算法/","excerpt":"","text":"一、遗传算法基本知识 1.遗传算法的遗传操作：选择、交叉、变异（选择出好的近似解，然后进行交叉和变异，就会产生新的种群） 交叉(crossover)：两个染色体的某一相同位置处DNA被切断，前后两串分别交叉组合形成两个新的染色体。也称基因重组或杂交； 2.遗传算法的核心内容：参数编码、初识群体的设定、适应度函数的设计、遗传操作设计、控制参数 适应度：度量某个物种对于生存环境的适应程度。 3.遗传问题是从种群开始的，种群是由个体组成的，个体实际上是染色体带有特征的实体。染色体中控制某一特征的基因组合，决定了该特征的外在表现形式，所以在一开始需要实现从表现型到基因型的映射，即编码工作。 4.遗传算法可以看作是多元函数求最优解，多元函数可能存在很多的极大值或者极小值，遗传算法就是找出其中的最大值或者最小值。 寻找最大值的方法就像袋鼠跳，我们希望袋鼠会跳到最高的位置。 5.袋鼠跳的几种方式 爬山算法：一只袋鼠在一个山峰，于是朝着不远处的另一个更高的山峰跳过去，但是第二个山峰不一定就是最高的。局部的最优解不一定是全局的最优解，有可能更远的地方有一个比现在的山峰还要高的山峰，但是那个山峰超出了袋鼠的跳跃范围（或者说认为设定的约束条件） 模拟退火： 遗传算法：有很多袋鼠，它们降落到喜玛拉雅山脉的任意地方。这些袋鼠并不知道它们的任务是寻找珠穆朗玛峰。但每过几年，就在一些海拔高度较低的地方射杀一些袋鼠。于是，不断有袋鼠死于海拔较低的地方，而越是在海拔高的袋鼠越是能活得更久，也越有机会生儿育女。就这样经过许多年，这些袋鼠们竟然都不自觉地聚拢到了一个个的山峰上，可是在所有的袋鼠中，只有聚拢到珠穆朗玛峰的袋鼠被带回了美丽的澳洲。 二、遗传算法的实现过程 1、建立表现型和基因型的映射关系 假设我们需要找出最适应在寒冷地区生存的人类的某一条染色体的编码，假设该染色体上有十个基因片段，十个基因片段的排序决定了人类对于寒冷的耐受性。 2.随机初始化一个种群 随机初始化一个种群，意味着这一个种群中人，十个基因的排列顺序的速记排列的。 3.适应度的评估 接下来测试每个人对寒冷的耐受能力，当然是越能忍受寒冷越好。 4.选择 按照某种规定做优化的选择，比如每隔一段时间淘汰掉耐受能力最后的20%。 5.基因的交叉 让生存下来的人类繁衍后代，然后产生下一代袋鼠。 6.基因的变异 让存活下来的一部分的基因序列随机改变一下排序。（应规定随机变异的程度，比如不能超过四个基因的位置变化之类的，或者不允许第一个和最后一个基因突变） 总结：遗传算法不需要费心去寻找最优解，而是把那些不好的存在抹杀就可以了. 三、遗传算法的具体实现 1、编码 遗传算法的编码主要有三类：二进制编码、浮点编码、符号编码 1.1二进制编码：就是用0和1进行编码 二进制编码的缺点：个体长度较短的时候，可能达不到精度的要求；个体长度较大的手，会增加遗传算的搜索空间（当个体的长度较短的时候，比如只有两个01、00、10、11，假设寻找会使人的头发显现黑色基因，通过最简单的比较就可知道那两个比较好，假设是11和10，利用这两个进行杂交会出现的结果就是10和11，这时候就无法判断到底是哪个比较好了）（当个体的长度过长的手，交叉或者变异之后的变数会增大，会给搜索最佳算法增加难度） 1.2浮点编码：个体的每个基因值用某一范围内的一个浮点数来表示 浮点编码的优点： 适用于在遗传算法中表示范围较大的数值 适用于精度要求较高的遗传算法 适用于较大空间的遗传搜索 降低了遗传算法的计算复杂性，提高了运算的速率 1.3符号编码法 2、袋鼠的染色体编码 3、评价个体的适应度-适应度函数 4、选择函数 轮盘赌选择：个体进入下一代的概率=个体的适应度数值/整体的适应度数值和（选择误差比较大） 随机竞争选择：每次按照轮盘赌选择一对个体，然后让这两个个体进行竞争，适应度高的被选中，如此反复。（但是轮盘赌选择的个体是如何选择的） 最佳保留选择：首先按轮盘赌选择方法执行遗传算法的选择操作，然后将当前群体中适应度最高的个体结构完整地复制到下一代群体中。（那么适应度不高的个体应该如何选择） 期望值选择：第一步，计算群体中每个个体在下一代群体中的生存期望数值N；第二步，若某一个体被选中参与交叉运算，则它在下一代中的生存期望数目减去0.5，若某一个体未 被选中参与交叉运算，则它在下一代中的生存期望数目减去1.0。（此处的选择是如何选择的）；第三步，随着选择过程的进行，若某一个体的生存期望数目小于0时，则该个体就不再有机会被选中。 确定式选择：第一步，计算群体中的各个个体在下一代群体中的生存期望数目；第二步，用N的整数部分确定各个对应个体在下一代群体中的生存数目；第三步，用N的小数部分对个体进行降序排列，顺序去前M个个体加入下一代群体中。（假设得出来的N的数值分别为3.1、3.2、3.5、4.5、5.5，表示每一个在下一代中的期望的数目有3、3、3、4、5，其中3的有三个，所以可以降序排列，取第一个，就是3.3） 无回放余数随机选择： 均匀排列：对群体中的所有个体按照适应度的大小进行排序，根据排序来分配每个个体被选中的概率。 最佳保存策略：适应度最高的不参与交叉和变异运算，而是用这个来代替，经过交叉和变异之后，适应度最低的个体。 随机联赛选择：随机选取N个，然后将适应度最高的一个个体遗传到下一代中。 排挤选择：新产生的子代，会替代或者排挤相似的旧的父代的个体，提高群体的多样性。 5、交叉 所谓交叉，是指相互配对的两个染色体，按照某种方式交互部分基因，从而形成两个新的个体。 适用于二进制和浮点编码个体的交叉算子： 单点交叉：只有一个交叉点，在该点交换部分染色体。 两点交叉和多点交叉： 均匀交叉：每个基因片段以相同的交叉概率进行交换，形成两个新的个体。 算术交叉：由两个个体的线性组合而产生出两个新的个体。该操作对象一般是由浮点数编码表示的个体。 6.变异 所谓变异，就是指某个基因，用其他等位基因来替换。 变异算子： 基本位变异：对个体编码串中以变异概率、随机指定的某一位或某几位仅因座上的值做变异运算。 均匀变异：用一个范围内的随机数，替换编码串中的原有数值（用一个较小的概率） 边界变异：随机的取基因座上的两个对应边界基因值之一去替代原有基因值。特别适用于最优点位于或接近于可行解的边界时的一类问题。（什么是边界基因值） 非均匀变异： 高斯近似变异：","categories":[{"name":"学士论文相关","slug":"学士论文相关","permalink":"http://yoursite.com/categories/学士论文相关/"}],"tags":[{"name":"遗传算法","slug":"遗传算法","permalink":"http://yoursite.com/tags/遗传算法/"}]},{"title":"123","slug":"123","date":"2019-03-07T10:38:30.000Z","updated":"2019-03-07T10:38:30.192Z","comments":true,"path":"2019/03/07/123/","link":"","permalink":"http://yoursite.com/2019/03/07/123/","excerpt":"","text":"","categories":[],"tags":[]}]}